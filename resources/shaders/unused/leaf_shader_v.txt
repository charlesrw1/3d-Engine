#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexture;

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoord;

uniform mat4 u_model;
uniform mat4 u_view;
uniform mat4 u_projection;

uniform vec3 pivot;

uniform mat4 leaf_mat;

uniform mat4 normal_mat;	// inverse model matrix

uniform float wind_intensity;	// how strong the wind is
uniform vec3 wind_direction; 	// wind only moves in 2d
uniform float wind_speed;		// how fast the wind is moving
uniform float time;				// time that changes

// Thank you neil mendoza for this
mat4 rotationMatrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}
mat4 translation(vec3 pos)
{	
	return mat4(1,0,0,0,
				0,1,0,0,
				0,0,1,0,
				pos.x,pos.y,pos.z,1);
}

void main()
{
	float time_offset = length(vec3(0)-aPos);

	float angle = wind_intensity * sin(wind_speed*time-time_offset); //* 2dNoise(dot(wind_direction,pivot),time);
	
	mat4 trans_to = translation(pivot);
	mat4 rot = rotationMatrix(cross(vec3(wind_direction.x,0,wind_direction.y),vec3(0,1,0)),angle);
	mat4 trans_from = translation(-pivot);
	
	mat4 sum = trans_to*rot*trans_from*u_model;
	
//	Normal = mat3(transpose(inverse(model)))*aNormal;
	
	FragPos = vec3(sum * vec4(aPos,1.0));
	
	gl_Position = u_projection * u_view * vec4(FragPos,1.0);
	
	TexCoord = aTexture;
}
	
	
	