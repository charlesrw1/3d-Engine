#version 330 core

out vec4 FragColor;

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoord;

struct Light
{
	vec3 position;
	vec3 color;
	float radius;
};

uniform Light lights[8];

uniform sampler2D diffuse_tex;
uniform sampler2D shiny_tex;

uniform vec3 view_pos;
const float radius = 10.0;
void main()
{
	vec3 color = texture(diffuse_tex, TexCoord).rgb;
	
	vec3 sum = vec3(0);
	
	for(int i=0;i<8;i++) 
	{
		// Diffuse
		vec3 light_dir = normalize(lights[i].position - FragPos);
		vec3 normal = normalize(Normal);
		float diff = max(dot(normal, light_dir), 0.0);
		vec3 diffuse = diff * color * lights[i].color;
		// Specular
		vec3 view_dir = normalize(view_pos - FragPos);
		vec3 halfway = normalize(view_dir+light_dir);
		float specular = pow(max(dot(halfway,normal),0),36);
		// dont add ambient, already baked into directional lighting shader
		
		// attenuate
		float dist = length(FragPos-lights[i].position);
		// light attenuation, real time rendering
		
		vec3 result = diffuse + specular*0.2;

		result *= 1.0/(dist*dist + 1.0);
		
		sum += result;
	}
	
	FragColor = vec4(sum,1.0);
}
		