#version 330 core
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
in vec2 TexCoord;
in vec4 FragPosLightSpace;
  

struct Light
{
	vec3 direction;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform Light light;
uniform vec3 viewPos;

// Material
uniform sampler2D baseTex;
uniform sampler2D shinyTex;

uniform sampler2D shadow_map;

uniform float shininess;


float shadow_calc(vec4 light_space,float bias)
{
	vec3 proj_coords = light_space.xyz/light_space.w;
	proj_coords = proj_coords * 0.5 + 0.5;
	
	if(proj_coords.z > 1.0)
        return 0.0;
    
	
	float closest_depth = texture(shadow_map,proj_coords.xy).r;
	
	//float shadow = proj_coords.z-bias > closest_depth ? 1.0 : 0.0;
	
	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadow_map, 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(shadow_map, proj_coords.xy + vec2(x, y) * texelSize).r; 
			shadow += proj_coords.z - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	shadow /= 9.0;
	
	return shadow;
}

// NOTES:
// test ambient without sampling diffuse texture



void main()
{
    vec4 col = texture(baseTex, TexCoord);
	
	// ambient
    vec3 ambient = light.ambient * col.rgb;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(-light.direction);			// IF A POINT LIGHT: normalize(lightpos - fragpos)
	
	// N dot L
    //float diff = max(dot(norm, lightDir),0.0); 
	float diff = pow(dot(norm, lightDir)*0.5+0.5,2);// half lambert from valve, doesnt clamp the dark tones
    vec3 diffuse = light.diffuse * diff * col.rgb;
	
	// specular
	float specular_strength = 0.5;
	vec3 viewDir = normalize(viewPos - FragPos);
	
	// Blinnphong:
	vec3 halfway_dir = normalize(lightDir+viewDir);
	float spec = pow(max(dot(norm,halfway_dir),0.0),64);
	vec3 specular = light.specular * spec * 0.5;
	
	//vec3 reflectDir = reflect(-lightDir, norm);
	//spec = pow(max(dot(viewDir, reflectDir), 0.0),36);
	//specular = light.specular * spec; //* texture(shinyTex, TexCoord).g;
	
	
	// rim (from TF2 shader)
	float NdotE = max(dot(norm, viewDir), 0.0);
	vec3 rim = light.ambient * pow(1.0-NdotE, 6.0);
	rim *= 0.8;
	//rim = vec3(0.0);
	
    // lambertian
	float lambert = dot(norm, lightDir);
	lambert = clamp(lambert,0.01,0.99);
	
    //vec3 result = (ambient + diffuse + specular) * objectColor + rim;
	
	//vec3 result = ambient + diffuse + specular + rim;
	//vec3 result = (lambert * objectColor) + specular + rim;
	
	//vec3 result = (lambert * diffuse) + ambient + specular + rim;
	float bias = max(0.05 * (1.0 - dot(norm, lightDir)), 0.005);  
	float shadow = shadow_calc(FragPosLightSpace,0.005);
	
	vec3 result = (diffuse + specular)*(1-shadow) + ambient*0.5;
	
    FragColor = vec4(result, 1.0);
} 